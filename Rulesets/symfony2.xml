<ruleset name="Symfony2 Rules"
         xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0
                      http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
    <description>Contains rules for the Symfony2 framework.</description>

    <rule name="ControllerMethodName"
          message="The method name should end with Action in this controller."
          class="MS\PHPMD\Rule\Symfony2\ControllerMethodName">
        <description>
            <![CDATA[
When the class is a concrete implementation and ends with Controller, the method names have to end with Action.
If not, it is an indication for business logic in your controller.
So you have to outsource your business logic to services or event listeners.
            ]]>
        </description>
        <priority>3</priority>
        <properties>
            <property name="delimiter" value="," description="delimiter for explode" />
            <property name="allowedMethodNames" value="__construct" description="whitelist for method names. These are allowed reside in the controller though they are no actions." />
        </properties>
        <example>
            <![CDATA[
class FooController
{
    public function barAction() // good
    {
    }

    public function doSomthing() // bad
    {
    }
}
            ]]>
        </example>
    </rule>

    <rule name="EntitySimpleGetterSetter"
          message="The method should only be a simple {0} in this entity."
          class="MS\PHPMD\Rule\Symfony2\EntitySimpleGetterSetter">
        <description>
            <![CDATA[
If the class is an entity, it should contain only simple getter or setter.
Otherwise you have a data object and a business object in once. Swap out the methods with business logic to a model.
Use a factory or an abstract MappedSuperclass for the model methods.
If your class is an entity, use the "@isEntity" annotation to force the validation.
            ]]>
        </description>
        <priority>2</priority>
        <properties>
            <property name="delimiter" value="," description="delimiter for explode" />
            <property name="prefixes" value="get,set,is,has,add,remove" description="allowed prefixes in the methods" />
            <property name="whitelist" value="__construct,__destruct,__set,__get,__call,__callStatic,__isset,__unset,__sleep,__wakeup,__toString,__invoke,__set_state,__clone" description="allowed method names" />
            <property name="entityRegex" value="(\*\s*@\S*Entity)i" description="entity regex for class doc comment" />
            <property name="classIsEntityRegex" value="(\*\s*@isEntity)i" description="annotation that the class is an entity" />
        </properties>
        <example>
            <![CDATA[
class Entity
{
    private $data;

    public function getData() // good
    {
        return $this->data;
    }

    public function setData($data) // good
    {
        $this->data = $data;

        return $this;
    }

    public function setData($data) // bad
    {
        $this->data = $data;
        $this->doSomething();
    }

    public function doSomthing() // bad
    {
        foreach ($this->data as $data) {
            calculate($data);
        }
    }
}
            ]]>
        </example>
    </rule>

    <rule name="EntityConstants"
          message="Don't contain constants in your entity. Important information are distribute throughout the project. You reduce the reusability."
          class="MS\PHPMD\Rule\Symfony2\EntityConstants">
        <description>
            <![CDATA[
Don't contain constants in your entity. Important information are distribute throughout the project. You reduce the reusability.
It is better to create a "Static" namespace. Than you create final classes with your constants in this namespace.
So you can use the constants independent of your entity.
            ]]>
        </description>
        <priority>2</priority>
        <properties>
            <property name="entityRegex" value="(\*\s*@\S*Entity)i" description="entity regex for class doc comment" />
            <property name="classIsEntityRegex" value="(\*\s*@isEntity)i" description="annotation that the class is an entity" />
        </properties>
        <example>
            <![CDATA[
// good
class Identifier
{
    const SPECIAL_ID = 1;
}

// bad
class Entity
{
    const SPECIAL_ID = 1;

    public function getAttribute()
    {
    }
}
            ]]>
        </example>
    </rule>

    <rule name="ConstructorNewOperator"
          message="With a new operator in the constructor you have a strong dependency. Make your class flexible and inject the new instance via DI."
          class="MS\PHPMD\Rule\Symfony2\ConstructorNewOperator">
        <description>
            <![CDATA[
With a new operator in the constructor you have a strong dependency. Make your class flexible and inject the new instance via DI.
Even better is to define an interface and inject this via the constructor parameter. So you can replace the dependency with an other instance.
You can use the symfony service container and define a service with arguments. Please check also the calls argument.
With this rule you support the open-close principle.
            ]]>
        </description>
        <priority>4</priority>
        <properties>
            <property name="delimiter" value="," description="delimiter for explode" />
            <property name="allowedClassNames" value="DateTime,ArrayCollection" description="whitelist for class names. These are allowed to instantiate in the constructor" />
        </properties>
        <example>
            <![CDATA[
class Converter
{
    private $reader;

    public function __construct()
    {
        $this->reader = new Reader(); // bad
    }
}

class Converter
{
    private $reader;

    public function __construct(ReaderInterface $reader)
    {
        $this->reader = $reader; // good
    }
}
            ]]>
        </example>
    </rule>
</ruleset>
